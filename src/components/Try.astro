<!-----
For trying new thing
--- -->


<div class="h-[200vh]"></div>
<div class="bg-[url('/assets/testimonial_bg.jpg')] bg-cover h-[100vh] w-[100vw] "> 
  <div class="text-center relative top-[10vh] md:top-[10vh]">
      <h6 class="text-xl font-extrabold text-[#f04336] mb-[18px] md:text-4xl ">Why Choose us?</h6>
   <h2 class="text-3xl text-[#0a303a] font-extrabold md:text-5xl md:mt-[5vh]"> Best Service to Breeds Your <br/> Loved Dog Explore</h2>
</div>
<div class=" relative flex flex-col justify-center items-center mt-[25px] top-[15vh] md:top-[10vh] md:mt-[90px] space-y-4 md:flex md:flex-row md:space-x-4 ">
   <div class="container ">
      <h2 class="text-center text-[#0a303a] text-4xl font-extrabold"><span data-target="50">50</span>%</h2>
       <p class="text-center text-[#747474] text-base font-semibold"> DOGS ARE FIRST BRED</p>
   </div>
   <div class="container ">
      <h2 class="text-center text-[#0a303a] text-4xl font-extrabold"><span data-target="60">60</span>%</h2>
       <p class="text-center text-[#747474] text-base font-semibold"> DOGS ARE FIRST BRED</p>
   </div>
   <div class="container ">
      <h2 class="text-center text-[#0a303a] text-4xl font-extrabold"><span data-target="150">150</span>%</h2>
       <p class="text-center text-[#747474] text-base font-semibold"> DOGS ARE FIRST BRED</p>
   </div>
   <div class="container ">
      <h2 class="text-center text-[#0a303a] text-4xl font-extrabold"><span data-target="262">262</span>%</h2>
       <p class="text-center text-[#747474] text-base font-semibold"> DOGS ARE FIRST BRED</p>
   </div>
</div>
</div>

<style>
  .container {
      @apply flex flex-col justify-center h-[15vh] w-[30vh] bg-white shadow-2xl rounded-md md:w-[20vw] md:h-[15vw] 
  }
</style>

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    const counters = document.querySelectorAll('.container h2 span');
    
    // Options for the IntersectionObserver
    const observerOptions = {
      root: null,
      rootMargin: '0px',
      threshold: 0.1
    };

    // Create a new IntersectionObserver
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const counter = entry.target;
          counter.innerText = '0';
          
          // Function to update the counter
          const updateCounter = () => {
            const target = +counter.getAttribute('data-target');
            const count = +counter.innerText;
            const increment = target / 200; // Define the increment value

            if (count < target) {
              counter.innerText = `${Math.ceil(count + increment)}`;
              setTimeout(updateCounter, 10); // Update the counter every 10ms
            } else {
              counter.innerText = target; // Ensure the counter reaches the target
            }
          };
          updateCounter();
        }
      });
    }, observerOptions);

    // Observe each counter element
    counters.forEach(counter => {
      observer.observe(counter);
    });
  });
</script>
